import { Analysis, Patient, TreatmentPlan } from "@shared/schema";
import { AIResults } from "./apiTypes";
import { formatDate } from "./auth";

// This is a mock PDF generator for the MVP
// In a production app, we would use a library like jsPDF
export const generatePatientReport = async (
  patient: Patient,
  analysis: Analysis | null,
  treatmentPlan: TreatmentPlan | null
) => {
  // In a real app, we would generate a PDF here
  // For the MVP, we'll just create a Blob with HTML content
  
  let resultsHtml = '<p>No analysis results available</p>';
  
  if (analysis && analysis.results) {
    const aiResults = analysis.results as unknown as AIResults;
    
    resultsHtml = `
      <h2>Analysis Results</h2>
      <p><strong>Overall Dental Health:</strong> ${aiResults.overallHealth}</p>
      <p><strong>Analysis Date:</strong> ${formatDate(analysis.createdAt)}</p>
      <p><strong>Confidence Score:</strong> ${analysis.confidence}%</p>
      
      <h3>Summary</h3>
      <p>${aiResults.summary}</p>
      
      <h3>Findings</h3>
      <ul>
        ${aiResults.findings.map(finding => `
          <li>
            <strong>${finding.type.replace('_', ' ')} (${finding.confidence}% confidence):</strong> 
            ${finding.description}
          </li>
        `).join('')}
      </ul>
      
      <h3>Recommendations</h3>
      <ul>
        ${aiResults.recommendations.map(rec => `
          <li>
            <strong>${rec.procedure.replace('_', ' ')} (${rec.urgency} urgency):</strong> 
            ${rec.notes}
          </li>
        `).join('')}
      </ul>
    `;
  }
  
  let treatmentHtml = '<p>No treatment plan available</p>';
  
  if (treatmentPlan) {
    treatmentHtml = `
      <h2>Treatment Plan</h2>
      <p><strong>Title:</strong> ${treatmentPlan.title}</p>
      <p><strong>Created:</strong> ${formatDate(treatmentPlan.createdAt)}</p>
      <p><strong>Status:</strong> ${treatmentPlan.status}</p>
      <p><strong>Description:</strong> ${treatmentPlan.description}</p>
      
      ${treatmentPlan.steps ? `
        <h3>Treatment Steps</h3>
        <ol>
          ${(treatmentPlan.steps as any[]).map((step, index) => `
            <li>
              <strong>Step ${index + 1}:</strong> ${step.description}
              ${step.duration ? `<br><em>Duration: ${step.duration}</em>` : ''}
            </li>
          `).join('')}
        </ol>
      ` : ''}
    `;
  }
  
  const reportHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Patient Report - ${patient.fullName}</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; }
        h1 { color: #3182CE; }
        h2 { color: #2C5282; margin-top: 1.5em; }
        h3 { color: #4A5568; }
        .header { border-bottom: 2px solid #E2E8F0; padding-bottom: 1em; margin-bottom: 2em; }
        .footer { border-top: 2px solid #E2E8F0; padding-top: 1em; margin-top: 2em; font-size: 0.8em; }
        .patient-info { background: #F7FAFC; padding: 1em; border-radius: 0.5em; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Dental Treatment Report</h1>
        <p>Generated by Insmile AI - ${new Date().toLocaleString()}</p>
      </div>
      
      <div class="patient-info">
        <h2>Patient Information</h2>
        <p><strong>Name:</strong> ${patient.fullName}</p>
        <p><strong>Patient ID:</strong> ${patient.patientId}</p>
        <p><strong>Age:</strong> ${patient.age}</p>
        <p><strong>Status:</strong> ${patient.status}</p>
        <p><strong>Last Visit:</strong> ${formatDate(patient.lastVisit)}</p>
      </div>
      
      ${resultsHtml}
      
      ${treatmentHtml}
      
      <div class="footer">
        <p>This report was generated by Insmile AI, an AI-powered dental diagnostic tool.</p>
        <p>Please consult with your dental professional for interpretation of these results.</p>
        <p>Â© ${new Date().getFullYear()} Insmile AI. All rights reserved.</p>
      </div>
    </body>
    </html>
  `;
  
  // Create a Blob from the HTML content
  const blob = new Blob([reportHtml], { type: 'text/html' });
  
  // Create a download link and trigger a click
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `patient-report-${patient.patientId}.html`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  return true;
};
